/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team2.shared;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.ArrayList;

/**
 * The main class for the Attendance Manager application.
 */
public class App {
    /**
     * The Professor using the application.
     */
    private final Professor professor;
    /**
     * The controller for the application.
     */
    private final TextUserController controller;
    private final TextUserView view;

    /**
     * The EventManager for the application.
     */
    private final EventManager eventManager;

    /**
     * Constructs a new App object with the specified Professor and controller.
     *
     * @param professor  The Professor using the application.
     * @param controller The controller for the application.
     * @throws GeneralSecurityException If there is a security error.
     * @throws IOException              If there is an I/O error.
     */
    public App(Professor professor, TextUserController controller, TextUserView view)
            throws GeneralSecurityException, IOException {
        this.professor = professor;
        this.controller = controller;
        this.view = view;
        this.eventManager = new EventManager();
    }

    /**
     * The main method for the Attendance Manager application.
     *
     * @param args The command-line arguments.
     * @throws IOException              We will not handle this exception.
     * @throws GeneralSecurityException We will not handle this exception.
     */
    public static void main(String[] args) throws IOException, GeneralSecurityException {
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        TextUserController controller = new TextUserController(input, System.out);
        TextUserView view = new TextUserView(System.out);
        University university = controller.readUniversity();// TODO!!!!
        ProtectedInfo info = new ProtectedInfo();
        Professor user = controller.register(info, university);
        controller.logIn(info);
        App app = new App(user, controller, view);
        app.eventManager.subscribe(new EmailAlertsListener());
        // app.logIn();
        app.welcome();
    }

    /**
     * Adds students to a course.
     *
     * @throws IOException We will not handle this exception.
     */
    public void addStudentsToCourse() throws IOException {
        int idx = controller.chooseCourse(professor);
        if (idx < professor.getCourses().size()) {
            ArrayList<Student> students = controller.keepAddingStudents();
            professor.getCourse(idx).addStudents(students);
        }
    }

    /**
     * Reads the attendance status for a list of students.
     *
     * @param studentsName The names of the students.
     * @param start        Whether the lecture has started.
     * @return The attendance status for the students.
     * @throws IOException We will not handle this exception.
     */
    public ArrayList<AttendanceStatus> readStatusForStudents(ArrayList<String> studentsName, boolean start)
            throws IOException {
        ArrayList<AttendanceStatus> status = new ArrayList<>();
        for (String s : studentsName) {
            status.add(controller.readStudentStatus(s, start));
        }
        return status;
    }

    /**
     * Starts a new lecture.
     *
     * @throws IOException We will not handle this exception.
     */
    public void startNewLecture() throws IOException {
        int idx = controller.chooseCourse(professor);
        if (idx < professor.getCourses().size()) {
            Course course = professor.getCourse(idx);
            ArrayList<AttendanceStatus> status = readStatusForStudents(course.getStudentsDisplayName(), true);
            Lecture lec = course.startLecture(status);
            course.endLecture(lec);
            // controller.stopTheLecture();
            // ArrayList<AttendanceStatus> statusLate =
            // readStatusForStudents(lec.getLateStudentsName(),false);
            // course.endLecture(lec, lec.getLateStudentsID(), statusLate);
        } else {
            controller.printPromptAndRead("wrong course number,return to menu.");
            startNewLecture();
        }
    }

    /**
     * Allows the professor to update the students' records for the most recent
     * lecture.
     *
     * @throws IOException              We will not handle this exception.
     * @throws GeneralSecurityException We will not handle this exception.
     */
    public void updateStudentsRecords() throws IOException, GeneralSecurityException {
        controller.updateStudentsRecords(professor, eventManager);
    }

    /**
     * Displays the students from a course.
     *
     * @throws IOException We will not handle this exception.
     */
    public void displayStudentsFromCourse() throws IOException {
        view.printCourses(professor);
        int idx = controller.chooseCourse(professor);
        if (idx < professor.getCourses().size()) {
            Course course = professor.getCourse(idx);
            view.printStudents(course);
        }
    }

    /**
     * Changes the display name of a student, if allowed.
     *
     * @throws IOException We will not handle this exception.
     */
    public void changeStudentDisplayName() throws IOException {
        if (!professor.getUniversityPolicy()) {
            view.printError("You cannot change the display name by policy!");
        }
        controller.changeStudentDisplayName(professor);
    }

    /**
     * Welcomes the user and allows them to choose an action.
     *
     * @throws IOException              We will not handle this exception.
     * @throws GeneralSecurityException We will not handle this exception.
     */
    public void welcome() throws IOException, GeneralSecurityException {
        int cmd = controller.readAction("Hi, " + professor.getName() + ". What do you want to do?");
        switch (cmd) {
            case 1:
                String courseID = "C" + (professor.getCourses().size() + 1);
                Course newCourse = controller.readNewCourse(courseID, professor);
                professor.addCourse(newCourse);
                break;
            case 2:
                addStudentsToCourse();
                break;
            case 3:
                controller.removeStudentsFromCourse(professor);
                break;
            case 4:
                startNewLecture();
                break;
            case 5:
                updateStudentsRecords();
                break;
            case 6:
                changeStudentDisplayName();
                break;
            case 7:
                controller.displayAttendanceFromCourse(professor);
                break;
            case 8:
                displayStudentsFromCourse();
                break;
            case 9:
                return;
        }
        welcome();
    }
}
