/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team2.attendancemanager;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * The main class for the Attendance Manager application.
 */
public class App {
    /**
     * The Professor using the application.
     */
    private final Professor professor;
    /**
     * The controller for the application.
     */
    private final TextUserController controller;

    /**
     * Constructs a new App object with the specified Professor and controller.
     *
     * @param professor  The Professor using the application.
     * @param controller The controller for the application.
     */
    public App(Professor professor,TextUserController controller){
        this.professor = professor;
        this.controller = controller;
    }

    //TODO!!!!!!!May edit later, check keywords and userid match
    public void logIn() throws IOException{
        boolean status = controller.logIn();
        if(status==true){
            return;
        }
        else{
            logIn();
        }
    }

    /**
     * Adds students to a course.
     * @throws IOException We will not handle this exception.
     */
    public void addStudentsToCourse() throws IOException{
        int idx = controller.displayAndChooseCourse(professor);
        if(idx<professor.getCourses().size()){
            ArrayList<Student> students = controller.keepAddingStudents();
            professor.getCourse(idx).addStudents(students);
        }
    }

    /**
     * Reads the attendance status for a list of students.
     * @param studentsName The names of the students.
     * @param start Whether the lecture has started.
     * @return The attendance status for the students.
     * @throws IOException We will not handle this exception.
     */
    public ArrayList<AttendanceStatus> readStatusForStudents(ArrayList<String> studentsName,boolean start) throws IOException{
        ArrayList<AttendanceStatus> status = new ArrayList<>();
        for(String s:studentsName){
            status.add(controller.readStudentStatus(s, start));
        }
        return status;
    }


    /**
     * Starts a new lecture.
     * @throws IOException We will not handle this exception.
     */
    public void startNewLecture() throws IOException{
        int idx = controller.displayAndChooseCourse(professor);
        if(idx<professor.getCourses().size()){
            Course course = professor.getCourse(idx);
            ArrayList<AttendanceStatus> status = readStatusForStudents(course.getStudentsDisplayName(),true);
            Lecture lec = course.startLecture(status);
            controller.stopTheLecture();
            ArrayList<AttendanceStatus> statusLate = readStatusForStudents(lec.getLateStudentsName(),false);
            course.endLecture(lec, lec.getLateStudentsID(), statusLate);
        }
    }

    /**
     * Displays the students from a course.
     * @throws IOException We will not handle this exception.
     */
    public void displayStudentsFromCourse() throws IOException{
        int idx = controller.selectCourse(professor.getCourses().size());
        if(idx<professor.getCourses().size()){
            Course course = professor.getCourse(idx);
            controller.displayStudentsFromCourse(course);
        }
    }


    /**
     * Welcomes the user.
     * @throws IOException We will not handle this exception.
     */
    public void welcome() throws IOException{
        int cmd = controller.readAction("Hi, "+professor.getName()+". What do you want to do?");
        switch(cmd){
            case 1:
                int courseID = professor.getCourses().size();
                Course newCourse = controller.readNewCourse(Integer.toString(courseID), professor, new ArrayList<Student>());
                professor.addCourse(newCourse);
                break;
            case 2:
                addStudentsToCourse();//adding feature to load csv
                break;
            case 3:
                startNewLecture();
                break;
            case 4:
                updateStudentsRecords();//TODO!!! I will do that - Louise. If displayAttendanceFromCourse() finish I will update to it too.
                break;
            case 5:
                changeStudentDisplayName();//TODO!!
            case 6:
                displayAttendanceFromCourse();//TODO!! 
            case 7:
                displayStudentsFromCourse();
                break;
            case 8:
                return;
        }
        welcome();
    }

    /**
     * The main method for the Attendance Manager application.
     * @param args The command-line arguments.
     * @throws IOException We will not handle this exception.
     */
    public static void main(String[] args) throws IOException {
        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
        TextUserController controller = new TextUserController(input, System.out);
        University university = controller.readUniversity();//TODO!!!!
        Professor user = controller.register(university);//TODO!!!!
        //Professor user = controller.readNewProfessor();
        App app = new App(user, controller);
        app.logIn();
        app.welcome();
    }
}
