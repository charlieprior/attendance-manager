/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.team2.client;

import edu.duke.ece651.team2.shared.Password;
import java.io.*;
import java.net.*;

import com.fasterxml.jackson.databind.ObjectMapper;

public class App {

  private ClientSideController clientSideController;
  private ClientSideView clientSideView;
  private ObjectInputStream in;
  private ObjectOutputStream out;
  private Socket socket;
  private boolean connected = false;
  private ObjectMapper mapper = new ObjectMapper();

  public App() {
    clientSideView = new ClientSideView();
    clientSideController = new ClientSideController(clientSideView);
  }

  public String[] parseMessage(String receivedMessage, String delimiter) {
    return receivedMessage.split(delimiter);
  }

  private int login() throws ClassNotFoundException {
    boolean loginSuccess = false;
    int userType = 0;

    while (!loginSuccess) {
      try {
        String[] credentials = clientSideController.login();
        int userID = Integer.parseInt(credentials[0]);
        String input = mapper.writeValueAsString(new Password(userID, credentials[1]));
        out.writeObject(input); // Send userID & password to server (default send Password object)
        out.flush(); // Flush the stream to ensure data is sent immediately

        // Read login result from server (By default, a string object is sent back.Click
        // to apply)
        String res = (String) in.readObject();
        System.out.println(res);
        String[] response = parseMessage(res, ":");
        String choice = response[0];
        String prompt = response[1];
        if (choice.equals("1")) {
          userType = 1; // student
          // clientSideView.displayMessage("Login successful.");
          loginSuccess = true;
        } else if (choice.equals("2")) {
          userType = 2; // Faculty
          loginSuccess = true;
          // clientSideView.displayMessage("Login successful.");
        } else {
          clientSideView.displayMessage(prompt);
          clientSideView.displayMessage("Login failed. Please try again.");
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return userType;
  }

  // Student-specific functionality
  private void studentFunctionality() {
    while (true) {
      try {
        int choice = clientSideController.studentOperations();
        System.out.println(choice);
        if (choice == 3) {
          out.writeObject(choice); // int type
          out.flush();
          // exit
          disconnectFromServer();
          break;
        } else{
          // send to server
          out.writeObject(choice); // int type
          out.flush();
        }

      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

  // Professor-specific functionality
  private void professorFunctionality() {
    while (true) {
      try {
        int choice = clientSideController.professorOperations();
        if (choice == 5) {
          // exit
          disconnectFromServer();
          break;
        }
        // send to server
        out.writeInt(choice); // int type
        out.flush();
        if (choice == 1) {

        } else if (choice == 2) {

        } else if (choice == 3) {

        } else if (choice == 4) {

        }

      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

  public void start() throws ClassNotFoundException {
    boolean connected = connectToServer();
    if (connected) {
      int userType = login();
      if (userType == 1) {
        clientSideView.displayMessage("Student login successful.");
        studentFunctionality();
      } else if (userType == 2) {
        professorFunctionality();
        clientSideView.displayMessage("Faculty login successful.");
      } else {
        clientSideView.displayMessage("Unknown user type.");
      }
    }
  }

  private boolean connectToServer() throws ClassNotFoundException {

    while (!connected) {
      try {
        // Connect to the server
        socket = new Socket("localhost", 8088);
        // in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        // out = new PrintWriter(socket.getOutputStream(), true);
        out = new ObjectOutputStream(socket.getOutputStream());
        in = new ObjectInputStream(socket.getInputStream());

        // Read connection status from server
        int connectionStatus = (int) in.readObject(); // int type
        if (connectionStatus == 1) {
          clientSideView.displayMessage("Connected to server.");
          connected = true;
        } else {
          clientSideView.displayMessage("Failed to connect to server.");
          clientSideView.displayMessage("Trying to connect again...");
          try {
            Thread.sleep(2000); // Wait for 2 seconds before retrying
          } catch (InterruptedException e) {
            e.printStackTrace();
          }
        }

      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    return connected;
  }

  public static void main(String[] args) throws ClassNotFoundException {
    App a = new App();
    a.start();
  }

  // Disconnect from the server
  public void disconnectFromServer() {
    try {
      if (socket != null && !socket.isClosed()) {
        socket.close();
        connected = false;
        clientSideView.displayMessage("Disconnected from the server.");
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}