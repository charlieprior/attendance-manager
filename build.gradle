/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}


subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    apply plugin: "org.openjfx.javafxplugin"
    repositories {
        jcenter()
    }
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    javafx {
        version = "19.0.2.1"
        modules = [ 'javafx.controls', 'javafx.fxml' ,'javafx.base', 'javafx.graphics']
    }
    dependencies {
        // Use JUnit Jupiter for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
        testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
        // This dependency is used by the application.
        implementation 'com.google.guava:guava:30.1.1-jre'
        clover 'org.openclover:clover:4.4.1'
        implementation 'com.opencsv:opencsv:5.9'

        // For Google Gmail API
        implementation 'com.google.api-client:google-api-client:2.0.0'
        implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
        implementation 'com.google.apis:google-api-services-gmail:v1-rev20220404-2.0.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.9'

        // For MySQL JDBC
        implementation 'com.mysql:mysql-connector-j:8.3.0'

        //For javafx
        implementation 'com.google.guava:guava:30.1.1-jre'
        testImplementation "org.mockito:mockito-core:2.+"
        testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'

        testImplementation "org.testfx:testfx-core:4.0.16-alpha"
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
        testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'


        testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'

    }
    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
            debug = true
            sourceCompatibility = '1.8'
            targetCompatibility = '1.8'
        }
    }

    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
        systemProperty "testfx.headless", "true"
        systemProperty "testfx.robot", "glass"
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }

}

// Project specific stuff
project (':shared'){
}
project (':server'){
    dependencies {
        implementation project(':shared')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project (':client'){
    dependencies {
        implementation project(':shared')
        implementation project(':server')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project(':admin') {
    dependencies {
        implementation project(':shared')
        implementation project(':server')
        //testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project(':courseManagement') {
    dependencies {
        implementation project(':shared')
        implementation project(':server')
//        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}

clover {
    report{
        xml=true
        html=true
    }
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

tasks.register("run-admin") {
    dependsOn project('admin').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Admin'
}
tasks.register("run-shared") {
    dependsOn project('shared').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the shared'
}
tasks.register("run-courseManagement") {
    dependsOn project('courseManagement').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the courseManagement'
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
tasks.register("resolveDependencies") {
    dependsOn project('server').getTasksByName('resolveDependencies',false)
    dependsOn project('client').getTasksByName('resolveDependencies',false)
    dependsOn project('shared').getTasksByName('resolveDependencies',false)
    dependsOn project('admin').getTasksByName('resolveDependencies',false)
    dependsOn project('courseManagement').getTasksByName('resolveDependencies',false)
    group = 'Build'
    description = 'Resolve/Download Dependencies'
}
